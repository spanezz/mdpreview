#!/usr/bin/python3
# coding: utf-8
import sys
import os
import argparse
import logging
import json
import time
import markdown
import jinja2
import datetime
import mimetypes

log = logging.getLogger()


class Mdpreview:
    def __init__(self, args):
        from staticsite.core import settings
        self.root = args.dir
        self.theme_root = os.path.abspath(args.theme)

        settings.SITE_NAME = "Markdown Preview " + self.root
        settings.SITE_URL = "http://localhost:8000"

    def run(self):
        mimetypes.init()

        self.reload()

        from livereload import Server
        server = Server(self.application)
        server.watch(self.root, self.reload)
        server.watch(self.theme_root, self.reload)
        server.serve(port=8000, host="localhost")

    def application(self, environ, start_response):
        path = environ.get("PATH_INFO", None)
        if path is None:
            start_response("404 not found", [("Content-Type", "text/plain")])
            return [b"Not found"]

        content = self.pages.serve_path(path, environ, start_response)
        if content is not None:
            return content

        start_response("404 not found", [("Content-Type", "text/plain")])
        return [b"Not found"]

    def reload(self):
        from staticsite.site import Site
        from staticsite.utils import timings
        from staticsite.core import PageFS
        import gc

        log.info("Loading site")
        # Instantiate site
        self.site = Site()

        # Read and analyze site contents
        with timings("Read site in %fs"):
            self.site.load_theme(self.theme_root)
            self.site.load_content(self.root)

        with timings("Analysed site tree in %fs"):
            self.site.analyze()
        gc.collect()

        self.pages = PageFS()
        self.pages.add_site(self.site)




def main():
    parser = argparse.ArgumentParser(description="Preview a markdown file in a browser.")
    parser.add_argument("dir", nargs="?", default=os.getcwd(), help="Directory with the files to preview (defaults to current directory)")
    parser.add_argument("-t", "--theme", default="/usr/share/doc/staticsite/example/theme/", help="Theme directory")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="verbose output")

    args = parser.parse_args()

    FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
    else:
        logging.basicConfig(level=logging.WARN, stream=sys.stderr, format=FORMAT)

    preview = Mdpreview(args)
    preview.run()


if __name__ == "__main__":
    main()
